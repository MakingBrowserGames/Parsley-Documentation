#sc2 extensions_metadata Custom Metadata Tags #sc2

#par Being one of the most widely used extension points it allows to create custom metadata you can add
to any object managed by Parsley. Like with most other extension points all the builtin tags of the core framework
like #cdi [Inject] #cdi or #cdi [MessageHandler] #cdi are implemented as extensions themselves. #par




#sc3 extensions_metadata_decorator The ObjectDefinitionDecorator Interface #sc3

#par Every custom metadata tag has to implements a simple interface with just one method: #par

#cdb
public interface ObjectDefinitionDecorator {
    
    function decorate (builder:ObjectDefinitionBuilder) : void;
    
}
#cdb

#par The method will be invoked by the container for each configuration tag it encounters for
an object that was added to the container. It doesn't matter whether it is a builtin configuration tag
or a custom extension tag, or whether it is a metadata tag, an MXML or XML tag. As long as the tag
is mapped to a class that implements this interface the container will invoke it for each tag on each object. #par

#par The #cdi builder #cdi parameter it passes to the decorator can be used to specify configuration options for the
object definition it currently processes. #par




#sc3 extensions_metadata_tasks Tasks performed by Custom Metadata #sc3

#par A custom metadata tag usually performs one or both of the following two tasks: #par

#lst
#lse Apply one or more of the existing framework features. The framework's configuration DSL accessible through 
the #cdi ObjectDefinitionBuilder #cdi instance passed to the decorator gives convenient access to core features,
like specifying injections to be performed or registering some of the built-in object processors like for a 
message handler. See #ref extensions_definitions #ref for more details. #lse

#lse Add new functionality. Sometimes none of the existing features are sufficient for solving a problem. In this
case you can apply a custom #cdi ObjectProcessor #cdi that configures each instance created from a definition.
See #ref extensions_metadata_processor #ref for details. #lse
#lst

#par For your own applications you usually implement two types of custom metadata tags. One type is a fully generic,
reusable extension. In this case you are of course invited to blog about it, post on our forum or contribute the
tag to the framework, if you think that it is generally useful. The other type of tag would be specific to your application.
Even if it is just reused in a few areas of a single application, a tag may very well help removing a lot of unnecessary
plumbing. #par




#sc3 extensions_metadata_sample Sample Implementations #sc3

#par As the builtin tags all use this extension point themselves, you can examine these implementations
as a starting point for you own tags. Most of the tag implementations reside in the #cdi parsley-config #cdi
source folder in the package #cdi org.spicefactory.parsley.tag #cdi. As you'll see most of them are fairly
simply, only delegating to the configuration DSL. You should always strive to reduce the logic in your tag 
implementations, making it easier to apply the feature programmatically in cases where using metadata is not appropiate. #par

#par To give a simple example, lets assume that you have an application that dispatches NavigationEvents managed by
Parsley whenever the user navigates to a new tab or window. Instead of using the generic #cdi MessageHandler #cdi
tag for getting notified you could create a custom tag that applies only for these navigation events: #par

#cdb
[NavigateTo("addUserForm")]
public function handleNavigation () : void 
#cdb

#par The implementation for this tag would look like this: #par

#cdb
[Metadata(types="method", multiple="true")]
public class NavigateTo implements ObjectDefinitionDecorator {

    [DefaultProperty]
    public var target:String;

    [Target]
    public var method:String;

    public var scope:String = ScopeName.GLOBAL;    

    public function decorate (builder:ObjectDefinitionBuilder) : void {
        
        MessageHandler
            .forMethod(method)
                .scope(scope)
                .type(NavigationEvent)
                .selector(target)
                    .apply(builder);
    }
    
}
#cdb

#par The #cdi [Metadata] #cdi tag is required to configure the metadata tag, it is explained in #ref extensions_metadata_register #ref. #par

#par The #cdi [DefaultProperty] #cdi tag marks a property that can be used without attribute name. Without that tag you'd need to always
explicitly specify the attribute name, so the example from above would read: #cdi [NavigateTo(target="addUserForm")] #cdi. #par

#par The #cdi [Target] #cdi attribute tells the framework that this is the property that holds the name of the member of the class
(property or method). For metadata to be placed on the class level this is not required of course. #par

#par The
#cdi scope #cdi property allows to define handlers only interested in navigation events for a particular scope. #par

#par Finally we use these property values in building a regular #cdi MessageHandler #cdi and applying it to 
the #cdi ObjectDefinitionBuilder #cdi.
We are passing the scope value, using the global scope as the default in case the attribute is omitted. The name of the navigation 
target is used as the selector for the handler, while the message type (#cdi NavigationEvent #cdi) is hard-coded in this case. #par




#sc3 extensions_metadata_processor The ObjectProcessor Interface #sc3

#par In the simple example in the preceding section we merely applied an existing feature using the configuration DSL.
When you want to add custom functionality not provided out of the box, some more work is required. In many cases this
involves performing some configuration task on the target object once it gets instantiated, but before it is passed
to the application. For this purpose an #cdi ObjectProcessor #cdi can be used. This is the interface that needs
to be implemented: #par

#cdb
public interface ObjectProcessor {
    
    function init (target: ManagedObject) : void;

    function destroy (target: ManagedObject) : void;
    
}
#cdb

#par Again, fairly simple. The #cdi init #cdi method will be invoked after the object was instantiated, but before its
#cdi [Init] #cdi method will be invoked (this is the default order which can be changed in configuration). 
Likewise the #cdi destroy #cdi method will be invoked
when the object was removed from the Context. #par


#sub The 1:N Relationship between Decorators and Processors #sub

#par Understanding this concept is important before implementing your first #cdi ObjectProcessor #cdi. 
There is a 1:N relationship between a decorator and a processor. When you implement
the #cdi ObjectDefinitionDecorator #cdi interface like shown in preceding sections, it will be invoked once for a particular
definition in your Context. If it is a definition created by an #cdi <Object> #cdi tag or any other tag which represents a
singleton, then the decorator will also map to only one processor. But for other types of objects, like those declared
with #cdi <DynamicObject> #cdi or #cdi <Command> #cdi multiple instances may be created from a single definition.
In this case one decorator can map to multiple processors, as a new processor might get created for each new instance. 
Whether you need a new processor instance for each new target instance solely depends on whether you keep state inside
your processor that only applies to one target. In this case you should implement the #cdi StatefulProcessor #cdi
subinterface which adds a #cdi clone #cdi method to create new instances for each new target. #par

#par With this mechanism you have the option to keep state that only
applies to a single target instance inside the processor. This greatly simplifies a lot of common tasks performed by processors
as most processors need to unregister some configuration artifact in the #cdi destroy #cdi method which they
created and applied in the #cdi init #cdi method, like adding and removing a message handler which always points
to one concrete target only. #par


#sub Example: The ManagedEventsProcessor #sub

#par All that may sound more complicated than it actually is, so let's look at an example for a fairly simple stateful processor, 
the implementation for the builtin #cdi [MessageDispatcher] tag #cdi
tag. #par

#cdb
public class MessageDispatcherProcessor implements PropertyProcessor, StatefulProcessor {
    
    private var scope:String;
    
    private var property: Property;
    
    private var dispatcher:MessageDispatcher;
    
    
    function MessageDispatcherProcessor (scope:String = null) {
        this.scope = scope;
    }
    
    
    /* implementing PropertyProcessor */
    
    public function targetProperty (property: Property): void {
        this.property = property;
    }
    
    
    /* implementing ObjectProcessor */

    public function init (target: ManagedObject) : void {
        this.dispatcher = new MessageDispatcher(target.context.scopeManager, scope);
        property.setValue(target.instance, dispatcher.dispatchMessage);
    }
    
    public function destroy (target: ManagedObject) : void {
        dispatcher.disable();
    }


    /* implementing StatefulProcessor */
    
    public function clone () : StatefulProcessor {
        return new MessageDispatcherProcessor(scope);
    }
    
}
#cdb

#par The #cdi init #cdi methods simply creates the dispatcher function (using a utility class) and injects
it into the target property. Later the dispatcher gets disabled once the object gets removed from the Context
to prevent it from getting used after the target instance became unmanaged. Since this is tied to the lifecycle
of one particular instance the processor is stateful. Therefore it implements #cdi StatefulProcessor #cdi in 
addition to #cdi PropertyProcessor #cdi, both subinterfaces of #cdi ObjectProcessor #cdi. The #cdi clone #cdi
method only passes the scope name to the constructor of the new processor instance, as that does not change
from target to target. The dispatcher is not getting passed, like the property instance which will get passed
into the new instance by the framework anyway. #par

#par Finally, in the corresponding decorator, which represents the actual tag you can use in metadata,
MXML and XML, you need to add the processor to the definition: #par

#cdb
[Metadata(name="MessageDispatcher", types="property")]
[XmlMapping(elementName="message-dispatcher")]
public class MessageDispatcherDecorator implements ObjectDefinitionDecorator {

    [Target]
    public var property:String;
    
    public var scope:String;
    
    
    public function decorate (builder:ObjectDefinitionBuilder) : void {
        builder
            .property(property)
            .process(new MessageDispatcherProcessor(scope))
            .mustWrite()
            .expectType(Function);
    }
    
#cdb

#par Here we simply create a new instance of our processor and apply it to the #cdi ObjectDefinitionBuilder #cdi. 
You can also see that it is convenient to implement #cdi PropertyProcessor #cdi. You could do the reflection yourself,
but the syntax above is a handy shortcut for just passing the name of the property as a String, and then relying
on the framework to check whether the property actually exists on the target class and whether the validation rules
you specified are met by that property. In this case we know the property must be writable and of type #cdi Function #cdi.
If everything is correct, the framework will then pass the #cdi Property #cdi instance (from Spicelib Reflect API)
to the #cdi targetProperty #cdi method of your #cdi PropertyProcessor #cdi. #par

#par Finally in rare cases you may also want to override the default phase the processor gets invoked in.
By default all processor get invoked in the #cdi preInit #cdi phase except for the processor for the #cdi [Init] #cdi
method itseld, which executes in the #cdi init #cdi phase. If you need your processor to be applied as a final step
eben after the init method had been called you can specify a phase explicitly: #par

#cdb
public function decorate (builder:ObjectDefinitionBuilder) : void {
    builder
        .property(property)
        .process(new MyCustomProcessor(comeParam))
        .mustWrite()
        .initIn(InitPhase.postInit());
}
#cdb

#par If in very rare cases you even need ordering within a particular phase, you can pass an additional order
attribute (the default is 0): #par

#cdb
public function decorate (builder:ObjectDefinitionBuilder) : void {
    builder
        .property(property)
        .process(new MyCustomProcessor(comeParam))
        .mustWrite()
        .initIn(InitPhase.postInit(#hlt 10 #hlt));
}
#cdb



#sc3 extensions_metadata_register Registering Metadata Tags #sc3

#par Finally you have to tell the framework and the Flex compiler about your custom metadata. #par

#par The Parsley support for metadata configuration tags is built on top of the Spicelib Reflection API which
offers the capability to map attributes of metadata tags to properties of classes, bringing AS3 metadata a bit closer
to the type-safe nature of Java Annotations for example. See #ref reflection_metadata_mapping #ref in the Spicelib Manual
for details. #par

#par Making the custom tag available for metadata configuration requires three steps: #par


#sub 1. Add the #cdi [Metadata] #cdi tag to the class declaration: #sub

#cdb
[Metadata(types="method")]
public class NavigatorTo implements ObjectDefinitionDecorator {
#cdb

#par With the types attribute we specify on which declarations we want the tag to be processed. In this case
we only allow it on method declarations. Other tags may be placed on properties or on the class level. #par


#sub 2. Add the class to the Spicelib Metadata Support: #sub

#cdb
Metadata.registerMetadataClass(NavigatorTo);
#cdb

#par This must happen before you create your first Parsley #cdi Context #cdi. #par


#sub 3. Add the metadata tag to mxmlc or compc compiler arguments: #sub

#cdb
-keep-as3-metadata+=NavigatorTo
#cdb

#par If you create a reusable library containing Parsley tag extensions it is recommended to compile the library into an SWC.
In this case you no longer have to explicitly add the compiler flag for applications that use this SWC as they will be automatically
included for all applications that use this SWC. In this case you only have to provide the compiler argument to compc when
creating the SWC. #par

#par For some general explanations on metadata configuration, like metadata inheritance or inconsistencies of the Flex compiler
in dealing with metadata, see #ref config_metadata #ref. #par
